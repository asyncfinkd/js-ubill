{"version":3,"sources":["../src/index.ts","../src/UbillAPI.ts"],"sourcesContent":["/**\n * JavaScript/TypeScript client for the Ubill API\n * @module js-ubill\n */\n\nexport { UbillAPI } from \"./UbillAPI\";\nexport * from \"./types\";\n","import axios, { AxiosInstance, AxiosResponse } from \"axios\";\nimport {\n  SendSMSResponse,\n  BrandNameResponse,\n  BrandName,\n  BalanceResponse,\n  UbillAPIOptions,\n  SendSMSRequest,\n} from \"./types\";\n\n/**\n * Client for interacting with the Ubill API\n * Provides methods for sending SMS messages, retrieving brand names, and checking account balance\n */\nexport class UbillAPI {\n  private client: AxiosInstance;\n  private apiKey: string;\n\n  /**\n   * Creates a new Ubill API client\n   * @param options - Configuration options for the API client\n   * @param options.apiKey - Your Ubill API key\n   * @param options.baseUrl - Optional custom API base URL (defaults to \"https://api.ubill.dev/v1\")\n   */\n  constructor(options: UbillAPIOptions) {\n    this.apiKey = options.apiKey;\n\n    this.client = axios.create({\n      baseURL: options.baseUrl || \"https://api.ubill.dev/v1\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    });\n\n    this.client.interceptors.request.use((config) => {\n      config.headers.key = this.apiKey;\n      return config;\n    });\n  }\n\n  /**\n   * Sends an SMS message to one or more recipients\n   * @param request - The SMS request details\n   * @param request.brandID - The ID of the brand to use as sender\n   * @param request.numbers - Array of recipient phone numbers\n   * @param request.text - The message content to send\n   * @param request.stopList - Optional flag to check numbers against stop list\n   * @returns Promise resolving to the API response\n   * @throws Error if the API request fails\n   */\n  sendSMS = async (request: SendSMSRequest): Promise<SendSMSResponse> =>\n    await this.request(\n      () => this.client.post<SendSMSResponse>(\"/sms/send\", request),\n      \"Error sending SMS\"\n    );\n\n  /**\n   * Retrieves all available brand names\n   * @returns Promise resolving to the brand names response\n   * @throws Error if the API request fails\n   */\n  async getAllBrandNames(): Promise<BrandNameResponse> {\n    return await this.request<BrandNameResponse>(\n      () => this.client.get<BrandNameResponse>(\"/sms/brandNames\"),\n      \"Error getting all brand names\"\n    );\n  }\n\n  /**\n   * Retrieves a specific brand name by ID\n   * @param id - The ID of the brand to retrieve\n   * @returns Promise resolving to the brand name or null if not found\n   * @throws Error if the API request fails\n   */\n  async getBrandName(id: string): Promise<BrandName | null> {\n    const response = await this.request<BrandNameResponse>(\n      () => this.client.get<BrandNameResponse>(\"/sms/brandNames\"),\n      \"Error getting brand name\"\n    );\n\n    const brand = response.brands.find((value) => value.id === id);\n    return brand || null;\n  }\n\n  /**\n   * Retrieves the current account balance\n   * @returns Promise resolving to the balance response\n   * @throws Error if the API request fails\n   */\n  getBalance = async (): Promise<BalanceResponse> =>\n    await this.request<BalanceResponse>(\n      () => this.client.get<BalanceResponse>(\"/sms/balance\"),\n      \"Error getting balance\"\n    );\n\n  private async request<T>(\n    action: () => Promise<AxiosResponse<T>>,\n    errorMsg: string\n  ): Promise<T> {\n    try {\n      const response = await action();\n\n      return response.data;\n    } catch (error) {\n      this.handleError(errorMsg, error);\n    }\n  }\n\n  /**\n   * Handles and transforms errors from API requests\n   * @param message - The error message prefix\n   * @param error - The error object\n   * @throws Formatted error with details\n   */\n  private handleError(message: string, error: unknown): never {\n    console.error(message, error);\n\n    if (axios.isAxiosError(error)) {\n      throw new Error(\n        `${message}: ${error.response?.data?.message || error.message}`\n      );\n    }\n\n    if (error instanceof Error) {\n      throw error;\n    }\n\n    throw new Error(`${message}: ${String(error)}`);\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,mBAAoD;AAc7C,IAAM,WAAN,MAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUpB,YAAY,SAA0B;AA0BtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAU,OAAO,YACf,MAAM,KAAK;AAAA,MACT,MAAM,KAAK,OAAO,KAAsB,aAAa,OAAO;AAAA,MAC5D;AAAA,IACF;AAmCF;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAa,YACX,MAAM,KAAK;AAAA,MACT,MAAM,KAAK,OAAO,IAAqB,cAAc;AAAA,MACrD;AAAA,IACF;AApEA,SAAK,SAAS,QAAQ;AAEtB,SAAK,SAAS,aAAAA,QAAM,OAAO;AAAA,MACzB,SAAS,QAAQ,WAAW;AAAA,MAC5B,SAAS;AAAA,QACP,gBAAgB;AAAA,MAClB;AAAA,IACF,CAAC;AAED,SAAK,OAAO,aAAa,QAAQ,IAAI,CAAC,WAAW;AAC/C,aAAO,QAAQ,MAAM,KAAK;AAC1B,aAAO;AAAA,IACT,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAuBA,MAAM,mBAA+C;AACnD,WAAO,MAAM,KAAK;AAAA,MAChB,MAAM,KAAK,OAAO,IAAuB,iBAAiB;AAAA,MAC1D;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAM,aAAa,IAAuC;AACxD,UAAM,WAAW,MAAM,KAAK;AAAA,MAC1B,MAAM,KAAK,OAAO,IAAuB,iBAAiB;AAAA,MAC1D;AAAA,IACF;AAEA,UAAM,QAAQ,SAAS,OAAO,KAAK,CAAC,UAAU,MAAM,OAAO,EAAE;AAC7D,WAAO,SAAS;AAAA,EAClB;AAAA,EAaA,MAAc,QACZ,QACA,UACY;AACZ,QAAI;AACF,YAAM,WAAW,MAAM,OAAO;AAE9B,aAAO,SAAS;AAAA,IAClB,SAAS,OAAO;AACd,WAAK,YAAY,UAAU,KAAK;AAAA,IAClC;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQQ,YAAY,SAAiB,OAAuB;AAlH9D;AAmHI,YAAQ,MAAM,SAAS,KAAK;AAE5B,QAAI,aAAAA,QAAM,aAAa,KAAK,GAAG;AAC7B,YAAM,IAAI;AAAA,QACR,GAAG,OAAO,OAAK,iBAAM,aAAN,mBAAgB,SAAhB,mBAAsB,YAAW,MAAM,OAAO;AAAA,MAC/D;AAAA,IACF;AAEA,QAAI,iBAAiB,OAAO;AAC1B,YAAM;AAAA,IACR;AAEA,UAAM,IAAI,MAAM,GAAG,OAAO,KAAK,OAAO,KAAK,CAAC,EAAE;AAAA,EAChD;AACF;","names":["axios"]}